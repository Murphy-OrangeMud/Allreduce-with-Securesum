import numpy as np
import matplotlib.pyplot as plt

x = np.array([i for i in range(10)])

"""
y_baseline = np.array([
    42.039529309,
    42.42052863,
    42.717257836,
    41.616911266,
    42.315873535,
    41.877417524,
    41.679949091,
    41.202721794,
    42.712534177,
    42.536364706
])
y_privacy = np.array([
    112.984092171,
    112.744038624,
    113.441169301,
    111.924516645,
    112.469898201,
    111.540038445,
    113.002608531,
    112.421077166,
    112.099703367,
    112.212513565
])
y_allreduce = np.array([
    67.303093671,
    66.778809024,
    66.455837142,
    65.651503518,
    66.901405756,
    65.67030608,
    65.989547804,
    66.263270203,
    65.704744337,
    66.28992781
])

print(f"MNIST dataset time cost mean: \nBASELINE: \
    {np.mean(y_baseline)}\n \
    PRIVACY: {np.mean(y_privacy)}\n \
    SECURE SUM: {np.mean(y_allreduce)}\n")
"""

"""
y_baseline = np.array([
    0.5337861279802752,
    0.2728122368736087,
    0.20265482483623037,
    0.15477449410210364,
    0.1321660022263999,
    0.10914546478367888,
    0.09848532893849181,
    0.08767487259437202,
    0.0786124330421078,
    0.07218127414502157
])
y_privacy = np.array([
    2.008825974144526,
    1.3545001210406642,
    1.1985090091293462,
    1.195884481665973,
    1.223724303068105,
    1.311584146455149,
    1.2904045176331103,
    1.304021615527211,
    1.3460403998817787,
    1.3479350779041555
])
y_allreduce = np.array([
    0.5335287791315615,
    0.26451515087728983,
    0.19678840741702597,
    0.15715273407598337,
    0.12784058279289515,
    0.1073204682401891,
    0.09638927192319832,
    0.085145763060531,
    0.0800164365912524,
    0.0726682882837998
])
"""

"""
y_baseline = np.array([99.74, 99.85, 99.93, 99.96, 99.97, 99.99, 99.99, 99.99, 99.99, 99.99])
y_privacy = np.array([97.19, 98.30, 98.65, 98.74, 98.84, 98.89, 98.93, 98.96, 99.02, 99.02])
y_allreduce = np.array([99.77, 99.87, 99.95, 99.97, 99.98, 99.98, 99.99, 99.99, 99.98, 99.99])
"""

"""
y_baseline = np.array([
    29.173874619,
    29.344556741,
    29.371898767,
    29.614493736,
    29.541909327,
    29.586644924,
    29.663870019,
    29.628189126,
    29.752416825,
    29.794115294
])

y_privacy = np.array([
    68.55213321,
    68.618527435,
    69.474881646,
    68.495671595,
    68.184621667,
    68.559873612,
    68.717423893,
    67.548468345,
    67.943491907,
    68.700490047
])

y_allreduce = np.array([
    44.233887001,
    44.755427724,
    44.436166512,
    44.165890151,
    44.08707072,
    44.513723307,
    43.950932399,
    44.67437396,
    44.30538546,
    44.303169791
])

print(f"CIFAR-10 dataset time cost mean: \nBASELINE: \
    {np.mean(y_baseline)}\n \
    PRIVACY: {np.mean(y_privacy)}\n \
    SECURE SUM: {np.mean(y_allreduce)}\n")
"""

"""
y_baseline = np.array([
    2.2916074093403083,
    2.1385901463722403,
    2.014254246010288,
    1.9297166224991344,
    1.8717385053034092,
    1.8229829490334921,
    1.781249419267592,
    1.7327435470047765,
    1.6978248492896706,
    1.6624929412486271
])
y_privacy = np.array([
    2.297960898137513,
    2.257453718473689,
    2.183967073858535,
    2.128675890209092,
    2.0977349980952456,
    2.081442290649606,
    2.088303927210176,
    2.085058369023974,
    2.0527873699851242,
    2.066411325553202
])
y_allreduce = np.array([
    2.2926343892623557,
    2.1398548887718833,
    2.0221044083386284,
    1.9402177483969432,
    1.8742453592550243,
    1.8321130804210826,
    1.7840829841436006,
    1.7396224617057243,
    1.6932300737582766,
    1.6548546282410321
])
"""

"""
y_baseline = np.array([55.80, 71.75, 78.69, 81.78, 83.52, 84.87, 86.30, 87.38, 88.34, 88.90])
y_privacy = np.array([55.05, 64.53, 69.48, 71.89, 73.81, 75.01, 75.74, 76.08, 78.45, 76.56])
y_allreduce = np.array([55.83, 71.15, 78.78, 82.07, 83.75, 84.86, 86.22, 87.26, 88.21, 88.71])
"""


y_allreduce = np.array([
    45.135058898,
    45.103142118,
    45.698987118,
    45.945639211,
    45.636010444,
    45.786483411,
    45.585920512,
    44.962293584,
    44.987939234,
    45.395371867
])

y_privacy = np.array([
    69.221246803,
    67.82320887,
    69.731963109,
    68.928408668,
    68.735789201,
    68.157919216,
    69.947916137,
    69.855879467,
    69.324483201,
    69.554503233
])

y_baseline = np.array([
    32.031771233,
    32.07286026,
    31.824037349,
    32.647494806,
    32.374690519,
    32.206539854,
    31.734386765,
    31.819022531,
    32.176407378,
    32.31958224
])
print(f"CIFAR-100 dataset time cost mean: \nBASELINE: \
    {np.mean(y_baseline)}\n \
    PRIVACY: {np.mean(y_privacy)}\n \
    SECURE SUM: {np.mean(y_allreduce)}\n")

"""
y_privacy = np.array([
    4.605928835400406,
    4.603201382106137,
    4.599308349023238,
    4.589366845580132,
    4.5797948993423425,
    4.561683210377729,
    4.546907366072801,
    4.524690990784307,
    4.5002395752395135,
    4.4801287735139095
])
y_baseline = np.array([
    4.605568811334951,
    4.602245742788242,
    4.583017650719554,
    4.529720646308111,
    4.366321656205492,
    4.222148326542276,
    4.152572410833325,
    4.090249371468571,
    4.0264530091802175,
    3.968947798539169
])
y_allreduce = np.array([
    4.605563576936121,
    4.602237544071764,
    4.582390759994161,
    4.529927000290801,
    4.37138012074103,
    4.222483758061599,
    4.153506027961558,
    4.0878037865876555,
    4.0280829839201955,
    3.966410729386644
])
"""

"""
y_baseline = np.array([5.09, 6.22, 6.59, 8.44, 14.72, 18.80, 21.33, 23.33, 25.24, 27.31])
y_privacy = np.array([4.81, 5.02, 6.67, 8.14, 7.79, 9.11, 9.07, 9.43, 10.97, 12.34])
y_allreduce = np.array([5.11, 6.04, 6.62, 8.50, 14.75, 18.74, 21.13, 23.50, 24.87, 27.56])
"""

"""
plt.figure()
plt.xlabel("Epoch")
plt.ylabel("Loss")
plt.plot(x, y_baseline, label='baseline', color='r', marker='o')
plt.plot(x, y_privacy, label='privacy', color='g', marker='o')
plt.plot(x, y_allreduce, label='secure sum', color='b', marker='o')
plt.title("Loss")

plt.legend()
plt.savefig("./Loss.png")
"""

"""
x = ["secure sum", "baseline", "differential privacy"]
y = [99.99, 99.99, 99.00]
# y = [90.39, 89.60, 77.89]
# y = [100. * 14639/50000, 100. * 14921/50000, 100. * 5924/50000]


plt.figure()
plt.ylabel("Top-5 Accuracy(%)")
plt.bar(x, y, color=['b', 'r', 'g'])
plt.ylim((98, 100.10))
plt.yticks(np.arange(98.00, 100.10, 0.25))

plt.title("Top-5 Accuracy comparison")
plt.savefig("./bar.png")
"""

# 99.99 99.99 99.00
# 90.39 89.60 77.89
# 14639/50000 14921/50000 5924/50000
